library(rjags)
library(coda)
library(dplyr)
library(ggplot2)
library(gridExtra)

options(repr.plot.width = 13)

data.loader <- function(path, verbose=F){
    files <- list.files(path=path)
    df <- data.frame()
    for (file in files){
       tryCatch(
            {
                file_data <- read.table(paste(path, file, sep=''))
                if (nrow(file_data) > 0) {
                    df <- rbind(df, file_data)
                }
            },
            error = function(e) {
                if (verbose == T){
                    message(paste("No measurements contained in file:", paste(path, file, sep=''), "- Skipping..."))
                }
            }
        )
    }
    colnames(df) <- 't'
    p.0 <- 7.4
    p.1 <- 14.90
    df$t <- (df$t * p.1 + p.0) * 1e-03
    df$sigma <- sqrt(4.4^2 + 0.11^2) * 1e-03
    return(df)
}

beta.params <- function(mean, variance, a, b){
    mu = (mean - a)/(b - a)
    var = variance/(b - a)^2
    alpha = mu * ((mu * (1 - mu)/var) - 1)
    beta = (1 - mu) * ((mu * (1 - mu)/var) - 1)
    return (c(alpha, beta))
}


data.hist <- function(df, t0, by, field=F){
    title <- paste('Positrons detected', 
                   ifelse(field, 'with', 'without'),
                   'the presence of a magnetic field')
    bins <- seq(t0, max(df$t)+by, by=by)
    hist.muon <- hist(df$t, breaks=bins, plot=FALSE)
    data.muon <- data.frame(t=hist.muon$mids, I=hist.muon$counts)
    data.muon$sigma <- sqrt(data.muon$I * (1 - data.muon$I/sum(data.muon$I)))
    plot <- ggplot(df, aes(x = t)) +
    geom_histogram(breaks=bins, fill = 'darkolivegreen2', color = "black", alpha=0.8) +
    geom_rect(aes(ymin = 0, ymax=Inf, xmin=0, xmax=0.6, alpha = 0.6, fill='red')) +
    labs(x = expression(t ~ "[" * mu * "s]"), y = "Counts", title = title) +
    geom_errorbar(data=data.muon, aes(x=t, ymin=I-sigma, ymax=I+sigma), width = 0.1, size=0.6, color='black') + 
    theme_minimal(base_size = 15) + 
    theme(plot.title = element_text(hjust = 0.5, size = 19, face = "bold"),
          axis.text = element_text(size = 12),
          axis.title = element_text(size = 14),
          legend.position = "none")
    return(plot)
}

posterior.plot <- function(chain, param){
    chain.df <- as.data.frame(as.mcmc(chain))
    quantiles <- summary(chain)$quantiles[param, c("2.5%", "97.5%")]
    title <- paste(param, ' posterior')
    mean_val <- mean(chain.df[[param]])
    dens <- density(chain.df[[param]])
    dens_df <- data.frame(x = dens$x, y = dens$y)
    p <- ggplot(dens_df, aes(x = x, y = y)) + 
            geom_line(color = 'black', size=1) +
            geom_area(data = subset(dens_df, x >= quantiles["2.5%"] & x <= quantiles["97.5%"]),
                      fill = 'red', alpha = 0.6) +
            geom_vline(aes(xintercept = mean_val), linetype = "dashed", size = 1, color='blue') +
            theme_minimal(base_size = 15) + 
            theme(
                plot.title = element_text(hjust = 0.5, size = 19, face = "bold"),
                axis.text = element_text(size = 12),
                axis.title = element_text(size = 14)
            ) +
            labs(y = "Density", x = param, title = title)
    return(p)
}

chain.plot <- function(chain, pars = NA){
    if (all(is.na(pars))) {
      params <- varnames(oscillation.chain[[1]])
    } else {
      params <- pars
    }
    N.samples <- nrow(chain[[1]])
    plots <- list()
    for (i in 1:length(params)){
        param <- params[i]
        trace <- traceplot(chain[, param], col = 'navy', main = paste('Traceplot for ', param))
        lags <- seq(0, N.samples, by = 10)
        acf <- autocorr(as.mcmc(chain[, param]), lags=lags, relative=F)
        acorr <- plot(lags, acf, ylim=c(0,1), pch=12, col='navy',
                      xlab='Lag', ylab='ACF', cex=1.3,
                      main = paste('Autocorrelation for ', param)) 
        plots[[2*(i-1)+1]] <- trace
        plots[[2*i]] <- acorr
    }
    n_plots <- length(plots)
    return(do.call(grid.arrange, c(plots, nrow = 2*length(params), ncol = 1)))
}
